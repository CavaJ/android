package com.example.aninemania.utility;

import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigInteger;
import java.security.MessageDigest;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.Signature;
import android.util.Base64;
import android.util.Log;

public class Utils {
	
	private static final String TAG = "Utils";
	
	public static void CopyStream(InputStream is, OutputStream os) {
		final int buffer_size = 1024;
		try {
			byte[] bytes = new byte[buffer_size];
			for (;;) {
				int count = is.read(bytes, 0, buffer_size);
				if (count == -1)
					break;
				os.write(bytes, 0, count);
			}
		} catch (Exception ex) {
		}
	} // CopyStream

	public static final String getAppSignature(Context context) {

		String appSignature = new BigInteger(1, getApkMd5(context))
				.toString(16);

		if (appSignature != null && appSignature.length() < 32) {
			appSignature = "0" + appSignature;
		}
		
		return appSignature; // It is clear, needs export.
	} // getAppSignature

	private static final byte[] getApkMd5(Context context) {

		try {
			Signature[] signatures = context.getPackageManager()
					.getPackageInfo(context.getPackageName(),
							PackageManager.GET_SIGNATURES).signatures;

			Signature signature = signatures[0];
			byte[] hexBytes = signature.toByteArray();
			MessageDigest digest = MessageDigest.getInstance("MD5");
			return digest.digest(hexBytes);
		} catch (NameNotFoundException ex) {

		} catch (Exception e) {

		}
		return null;
	} // getApkMd5

	@SuppressLint("TrulyRandom")
	public static String encrypt(String strToEncrypt, String key) {

		try {
			Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
			final SecretKeySpec secretKeySpec = new SecretKeySpec(
					key.getBytes(), "AES");
			cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);

			final String encryptedString = Base64.encodeToString(
					cipher.doFinal(strToEncrypt.getBytes()), Base64.DEFAULT);

			return encryptedString;
		} catch (Exception e) {
		}
		return null;

	} // encrypt

	public static String decrypt(String strToDecrypt, String key) {
		try {
			Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5PADDING");
			final SecretKeySpec secretKeySpec = new SecretKeySpec(
					key.getBytes(), "AES");
			cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);
			final String decryptedString = new String(cipher.doFinal(Base64
					.decode(strToDecrypt.getBytes(), Base64.DEFAULT)));
			return decryptedString;
		} catch (Exception e) {
		}
		return null;
	} // decrypt

} // class Utils
